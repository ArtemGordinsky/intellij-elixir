{
  // CANNOT be called `Parser` because `
  parserClass="org.elixir_lang.eex.Parser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="EEx"
  psiImplClassSuffix="Impl"
  psiPackage="org.elixir_lang.eex.psi"
  psiImplPackage="org.elixir_lang.eex.psi.impl"

  elementTypeHolderClass="org.elixir_lang.eex.psi.Types"
  elementTypeClass="org.elixir_lang.eex.psi.ElementType"
  tokenTypeClass="org.elixir_lang.eex.psi.TokenType"

  tokens = [
    CLOSING = "%>"
    COMMENT = "Comment"
    COMMENT_MARKER = "#"
    DATA = "Data"
    EQUALS_MARKER = "="
    ELIXIR = "Elixir"
    FORWARD_SLASH_MARKER = "/"
    OPENING = "<%"
    PIPE_MARKER = "|"
    QUOTATION = "Quotation"
    QUOTATION_MARKER = "%"
  ]
}

private eexFile ::= DATA? (tags DATA?)?
private tags ::= tag (DATA? tag)*
tag ::= OPENING (commentBody | quotationBody | elixirBody) CLOSING
        { pin = 1 }

private commentBody ::= COMMENT_MARKER COMMENT?
                        { pin = 1 }
private elixirBody ::=  elixirMarker? ELIXIR?
private elixirMarker ::= EQUALS_MARKER | FORWARD_SLASH_MARKER | PIPE_MARKER
private quotationBody ::= QUOTATION_MARKER QUOTATION?
                          { pin = 1 }
