/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.elixir_lang.beam.assembly;

import com.intellij.psi.tree.IElementType;
import org.elixir_lang.beam.assembly.psi.Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>BEAM.Assembly.flex</tt>
 */
class FlexLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\12\0\4\1\22\0\1\1\1\41\1\10\2\0\1\33\1\43\1\7\1\40\1\30\1\51\1\47\1\31\1"+
    "\50\1\5\1\34\1\32\11\3\1\12\1\0\1\35\1\42\1\25\1\2\1\51\32\6\1\36\1\11\1\26"+
    "\1\46\1\4\1\0\1\14\3\4\1\17\1\13\2\4\1\21\2\4\1\15\1\4\1\20\3\4\1\23\1\16"+
    "\1\22\1\24\5\4\1\37\1\45\1\27\1\44\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\3\1"+
    "\3\4\1\7\1\10\1\11\1\12\1\13\1\3\1\14"+
    "\1\15\1\7\1\16\1\17\1\20\2\7\1\21\1\1"+
    "\5\7\17\0\1\4\1\0\1\7\2\0\1\22\1\0"+
    "\1\23\1\0\1\24\2\0\1\7\6\24\1\0\4\24"+
    "\3\4\1\25\1\26\1\7\1\0\2\7\1\0\1\7"+
    "\13\0\1\27\1\23\1\24\1\0\1\24\2\0\3\24"+
    "\1\0\1\24\1\0\1\4\1\30\1\4\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\176\0\176\0\176\0\176\0\176\0\176\0\u02a0\0\u02ca"+
    "\0\176\0\176\0\176\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u02a0\0\u0444\0\u046e\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\124\0\u02a0\0\u0690\0\u06ba\0\u06e4\0\u017a"+
    "\0\u017a\0\u01a4\0\176\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6"+
    "\0\u07e0\0\176\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a02\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\176"+
    "\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78"+
    "\0\u0ca2\0\u0690\0\u01a4\0\u0ccc\0\u0cf6\0\u0690\0\u0d20\0\u0d4a"+
    "\0\u0d20\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\374"+
    "\0\u0e70\0\u078c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\4\1\14\1\15\4\7\1\16\1\7\1\17"+
    "\2\7\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\4\0\1\45"+
    "\1\46\4\0\1\47\12\45\1\50\6\0\1\51\1\52"+
    "\3\0\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\51\1\0\1\63\123\0\1\5\53\0\1\6"+
    "\26\0\1\6\21\0\1\64\2\7\1\0\1\7\3\0"+
    "\1\65\12\7\5\0\1\7\6\0\1\64\15\0\1\66"+
    "\47\0\2\11\1\67\1\11\4\0\12\11\5\0\1\11"+
    "\17\0\7\70\1\71\42\70\10\72\1\73\1\74\40\72"+
    "\4\0\1\75\1\76\2\0\1\77\1\0\1\100\12\75"+
    "\1\101\6\0\1\102\1\103\3\0\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\102\2\0\1\64"+
    "\2\7\1\0\1\7\3\0\1\65\1\7\1\114\10\7"+
    "\5\0\1\7\6\0\1\64\12\0\1\64\2\7\1\0"+
    "\1\7\3\0\1\65\6\7\1\115\3\7\5\0\1\7"+
    "\6\0\1\64\12\0\1\64\2\7\1\0\1\7\3\0"+
    "\1\65\10\7\1\116\1\7\5\0\1\7\6\0\1\64"+
    "\22\0\1\65\12\0\1\117\14\0\1\44\21\0\1\65"+
    "\51\0\1\65\12\0\1\44\7\0\1\120\4\0\1\44"+
    "\1\0\1\121\1\122\2\0\1\44\13\0\1\65\27\0"+
    "\1\123\21\0\1\65\27\0\1\123\1\0\1\44\17\0"+
    "\1\65\30\0\1\124\33\0\1\121\16\0\1\125\17\0"+
    "\1\65\12\0\1\44\17\0\1\126\16\0\1\65\33\0"+
    "\1\127\15\0\1\65\34\0\1\44\14\0\1\65\35\0"+
    "\1\44\3\0\1\51\2\45\1\0\1\45\3\0\1\130"+
    "\12\45\5\0\1\45\6\0\1\51\15\0\1\131\56\0"+
    "\1\51\51\0\1\130\12\0\1\132\14\0\1\51\21\0"+
    "\1\130\51\0\1\130\12\0\1\51\7\0\1\133\4\0"+
    "\1\51\1\0\1\134\1\132\2\0\1\51\13\0\1\130"+
    "\27\0\1\135\21\0\1\130\27\0\1\135\1\0\1\51"+
    "\17\0\1\130\30\0\1\136\33\0\1\134\16\0\1\137"+
    "\17\0\1\130\12\0\1\51\17\0\1\140\16\0\1\130"+
    "\33\0\1\141\15\0\1\130\34\0\1\51\14\0\1\130"+
    "\35\0\1\51\2\0\1\142\55\0\1\64\4\0\1\65"+
    "\45\0\1\11\43\0\10\72\1\143\1\74\40\72\2\0"+
    "\1\102\2\75\1\0\1\75\4\0\12\75\5\0\1\75"+
    "\6\0\1\102\15\0\1\144\44\0\10\77\1\102\1\145"+
    "\40\77\12\0\1\146\64\0\1\147\14\0\1\102\34\0"+
    "\1\102\7\0\1\150\4\0\1\102\1\0\1\151\1\147"+
    "\2\0\1\102\43\0\1\152\51\0\1\152\1\0\1\102"+
    "\50\0\1\153\33\0\1\151\16\0\1\154\32\0\1\102"+
    "\17\0\1\155\52\0\1\156\52\0\1\102\52\0\1\102"+
    "\3\0\1\64\2\7\1\0\1\7\3\0\1\65\2\7"+
    "\1\157\7\7\5\0\1\7\6\0\1\64\12\0\1\64"+
    "\2\7\1\0\1\7\3\0\1\65\2\7\1\160\7\7"+
    "\5\0\1\7\6\0\1\64\12\0\1\64\2\7\1\0"+
    "\1\7\3\0\1\65\11\7\1\161\5\0\1\7\6\0"+
    "\1\64\35\0\1\44\61\0\1\44\6\0\1\44\17\0"+
    "\1\65\12\0\1\44\36\0\1\65\27\0\1\44\21\0"+
    "\1\65\30\0\1\44\52\0\1\44\17\0\1\65\32\0"+
    "\1\44\52\0\1\44\10\0\1\51\4\0\1\130\64\0"+
    "\1\51\61\0\1\51\6\0\1\51\17\0\1\130\12\0"+
    "\1\51\36\0\1\130\27\0\1\51\21\0\1\130\30\0"+
    "\1\51\52\0\1\51\17\0\1\130\32\0\1\51\52\0"+
    "\1\51\10\0\1\102\44\0\10\77\1\162\1\145\40\77"+
    "\25\0\1\102\61\0\1\102\6\0\1\102\47\0\1\102"+
    "\52\0\1\102\52\0\1\102\52\0\1\102\52\0\1\102"+
    "\5\0\1\64\2\7\1\0\1\7\3\0\1\65\3\7"+
    "\1\161\6\7\5\0\1\7\6\0\1\64\12\0\1\64"+
    "\2\7\1\0\1\7\3\0\1\65\4\7\1\160\5\7"+
    "\5\0\1\7\6\0\1\64\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3738];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\14\1\6\11\2\1\3\11\11\1\16\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\1\11\1\0"+
    "\1\1\2\0\2\1\1\11\4\1\1\0\12\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\11\11\0\3\1\1\0"+
    "\1\1\2\0\3\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 25: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 26: break;
          case 3: 
            { return Types.INTEGER;
            } 
            // fall through
          case 27: break;
          case 4: 
            { return Types.NAME;
            } 
            // fall through
          case 28: break;
          case 5: 
            { return Types.DOT_OPERATOR;
            } 
            // fall through
          case 29: break;
          case 6: 
            { return Types.QUALIFIED_ALIAS;
            } 
            // fall through
          case 30: break;
          case 7: 
            { return Types.SYMBOLIC_OPERATOR;
            } 
            // fall through
          case 31: break;
          case 8: 
            { return Types.CLOSING_BRACKET;
            } 
            // fall through
          case 32: break;
          case 9: 
            { return Types.CLOSING_CURLY;
            } 
            // fall through
          case 33: break;
          case 10: 
            { return Types.CLOSING_PARENTHESIS;
            } 
            // fall through
          case 34: break;
          case 11: 
            { return Types.COMMA;
            } 
            // fall through
          case 35: break;
          case 12: 
            { return Types.MAP_OPERATOR;
            } 
            // fall through
          case 36: break;
          case 13: 
            { return Types.NAME_ARITY_SEPARATOR;
            } 
            // fall through
          case 37: break;
          case 14: 
            { return Types.OPENING_BRACKET;
            } 
            // fall through
          case 38: break;
          case 15: 
            { return Types.OPENING_CURLY;
            } 
            // fall through
          case 39: break;
          case 16: 
            { return Types.OPENING_PARENTHESIS;
            } 
            // fall through
          case 40: break;
          case 17: 
            { return Types.REFERENCE_OPERATOR;
            } 
            // fall through
          case 41: break;
          case 18: 
            { return Types.CHARLIST;
            } 
            // fall through
          case 42: break;
          case 19: 
            { return Types.STRING;
            } 
            // fall through
          case 43: break;
          case 20: 
            { return Types.ATOM;
            } 
            // fall through
          case 44: break;
          case 21: 
            { return Types.CLOSING_BIT;
            } 
            // fall through
          case 45: break;
          case 22: 
            { return Types.OPENING_BIT;
            } 
            // fall through
          case 46: break;
          case 23: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return Types.KEY;
            } 
            // fall through
          case 47: break;
          case 24: 
            { return Types.ATOM_KEYWORD;
            } 
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
